/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import { Prisma, Experience, User } from "@prisma/client";

export class ExperienceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.ExperienceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExperienceFindManyArgs>
  ): Promise<number> {
    return this.prisma.experience.count(args);
  }

  async findMany<T extends Prisma.ExperienceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExperienceFindManyArgs>
  ): Promise<Experience[]> {
    return this.prisma.experience.findMany(args);
  }
  async findOne<T extends Prisma.ExperienceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExperienceFindUniqueArgs>
  ): Promise<Experience | null> {
    return this.prisma.experience.findUnique(args);
  }
  async create<T extends Prisma.ExperienceCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExperienceCreateArgs>
  ): Promise<Experience> {
    return this.prisma.experience.create<T>(args);
  }
  async update<T extends Prisma.ExperienceUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExperienceUpdateArgs>
  ): Promise<Experience> {
    return this.prisma.experience.update<T>(args);
  }
  async delete<T extends Prisma.ExperienceDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExperienceDeleteArgs>
  ): Promise<Experience> {
    return this.prisma.experience.delete(args);
  }

  async findMembers(
    parentId: string,
    args: Prisma.UserFindManyArgs
  ): Promise<User[]> {
    return this.prisma.experience
      .findUnique({
        where: { id: parentId },
      })
      .members(args);
  }

  async getHost(parentId: string): Promise<User | null> {
    return this.prisma.experience
      .findUnique({
        where: { id: parentId },
      })
      .host();
  }
}
